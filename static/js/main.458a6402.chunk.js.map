{"version":3,"sources":["utils/helpers.ts","components/AnimatedDiv/index.tsx","utils/environment.ts","store/index.ts","store/settings/types.ts","store/settings/utils.ts","store/settings/actions.ts","store/settings/reducer.ts","components/Background/BackgroundAnimator/index.tsx","hooks/useSelector.ts","../public/img sync nonrecursive /.*/.png$|jpg$|jpeg$","../public/img/img_profile@1x.png","../public/img/img_profile@2x.png","../public/img/bg sync nonrecursive /.*/.png$|jpg$|jpeg$","../public/img/bg/bg_dark-doodle-first.png","../public/img/bg/bg_dark-doodle-fixed.png","../public/img/bg/bg_dark-doodle-second.png","../public/img/bg/bg_light-doodle-first.png","../public/img/bg/bg_light-doodle-fixed.png","../public/img/bg/bg_light-doodle-second.png","utils/icons.ts","components/Analytics.tsx","components/SplashLoader/index.tsx","App.tsx","index.tsx"],"names":["getContextPaths","context","keys","map","key","preloadImage","src","callback","noop","image","Image","onload","onerror","animationFrameTimeout","timeout","lastUpdate","frameRequest","requestAnimationFrame","window","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","call","animationCallback","timestamp","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","AnimatedDiv","props","align","alignSelf","animate","children","className","fillParent","flex","justify","passRef","row","style","rest","rootClassName","cn","rootStyle","undefined","div","ref","memo","EmailAddress","process","FacebookProfileUrl","GithubProfileUrl","GoogleTrackingId","IsGoogleTrackingDebug","IsReduxDebug","globalReducer","combineReducers","settings","settingsReducer","store","configureStore","reducer","middleware","defaultMiddleware","serializableCheck","immmutableCheck","devTools","SettingsAction","ThemeTypes","ThemeKey","setStoredTheme","theme","includes","localStorage","setItem","applyTheme","document","documentElement","setAttribute","toLowerCase","setTheme","action","SetTheme","initialState","getItem","getStoredTheme","state","type","payload","translate20","x","y","translate15","translate10","BackgroundAnimator","clientX","clientY","useSelector","s","animationProps","useSpring","xy","innerWidth","innerHeight","config","mass","tension","friction","transform","to","backgroundImage","useGlobalSelector","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","Object","resolve","module","exports","library","add","faEnvelope","faFacebook","faGithub","faToggleOff","faToggleOn","Analytics","overrides","useLocation","pathname","search","send","location","page","url","origin","ReactGA","set","appName","packageJson","name","appVersion","version","useEffect","SiteImages","require","SiteBackgroundImages","withRouter","totalItems","useRef","loadedItems","useState","showBackground","setShowBackground","loadPercent","setLoadPercent","loadState","setLoadState","incrementLoaded","current","complete","showImmediate","images","push","evaluateProgress","isLast","updateDelayMs","Math","trunc","load","Array","from","then","_","length","every","items","opacity","enter","leave","styles","item","width","springProps","floor","get","Landing","lazy","connector","connect","options","ga","initialize","debug","component","fallback","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.458a6402.chunk.js","sourcesContent":["/**\n * Defines the properties and methods found in an object returned by Webpack's\n * require.context.\n */\ninterface IRequireContext {\n    keys(): string[];\n    ( id: string ): any;\n    <T>( id: string ): T;\n    resolve( id: string ): string;\n    id: string;\n}\n\n/**\n * Interrogates a Webpack required context object, and returns as a flattened\n * map of file paths.\n * \n * @param {IRequireContext} context \n * @returns {string[]}\n */\nexport const getContextPaths = ( context: IRequireContext ): string[] => {\n    return context.keys().map( key => context( key ));\n};\n\n/**\n * Preloads an image, and fires the callback once complete or errored.\n * \n * @param {string} src \n * @param {string[]|null} srcSet \n * @param {Function} callback \n * @returns {HTMLImageElement}\n */\nexport const preloadImage = ( src: string, callback?: () => void ): HTMLImageElement => {\n    const noop = () => { };\n    \n    const image = new Image();\n    image.src = src;\n    image.onload = callback || noop;\n    image.onerror = callback || noop;\n\n    return image;\n};\n\n/**\n * Browser-agnostic cancellation of a frame request handle.\n * \n * @param {number|undefined} frameRequest \n */\nexport const cancelAnimationFrame = ( frameRequest: number ): void => {\n    const cancelAnimationFrame =\n        window.cancelAnimationFrame ||\n        ( window as any ).mozCancelAnimationFrame ||\n        ( window as any ).webkitCancelAnimationFrame ||\n        ( window as any ).msCancelAnimationFrame;\n\n    cancelAnimationFrame.call( window, frameRequest );\n};\n\n/**\n * Browser-agnostic animation frame request functionality\n * operating on a variably-timed callback. Think of this\n * as a debounced request for animation frame, useful for\n * smoothing animations that might need to be updated by\n * component state.\n * \n * @param {Function} callback \n * @param {number} timeout \n */\nexport const animationFrameTimeout = ( callback: () => void, timeout: number ): void => {\n    const requestAnimationFrame =\n        window.requestAnimationFrame ||\n        ( window as any ).mozRequestAnimationFrame ||\n        ( window as any ).webkitRequestAnimationFrame ||\n        ( window as any ).msRequestAnimationFrame;\n\n    let lastUpdate: number|undefined,\n        frameRequest: number|undefined;\n\n    const animationCallback = ( timestamp: number ): void => {\n        if ( !lastUpdate )\n            lastUpdate = timestamp;\n\n        if ( timestamp - lastUpdate >= timeout && frameRequest ) {\n            callback();\n            cancelAnimationFrame( frameRequest );\n        } else {\n            frameRequest = requestAnimationFrame.call( window, animationCallback );\n        }\n    };\n\n    frameRequest = requestAnimationFrame.call( window, animationCallback );\n};\n\n/**\n * Maps a dynamic object of CSS class names into a single space-delimited string.\n * \n * @param {string} className \n * @param {object} classModule \n * @returns {string}\n */\nexport const mapClassNames = ( className: string = '', classModule: any = {} ): string => {    \n    if ( !classModule )\n        return className;\n\n    return className.split( ' ' )\n        .map( c => classModule[ c ] || c )\n        .join( ' ' );\n};","import { ComponentPropsWithoutRef, FC, memo } from 'react';\nimport cn from 'classnames';\nimport { animated } from 'react-spring';\nimport './index.scss';\n\n/**\n * Defines properties allowed on this component.\n */\ninterface IProps extends ComponentPropsWithoutRef<any> {\n    align?: string|boolean;\n    alignSelf?: string|boolean;\n    animate?: boolean;\n    className?: string;\n    fillParent?: boolean;\n    flex?: boolean|number;\n    justify?: boolean|string;\n    passRef?: any;\n    row?: boolean;\n    style?: any;\n}\n\n/**\n * Functional component a normalized memo'd `div` element, optionally animated.\n * \n * @param {IProps}\n */\nconst AnimatedDiv: FC<IProps> = ( props ) => {\n    const {\n        align,\n        alignSelf,\n        animate,\n        children,\n        className,\n        fillParent,\n        flex,\n        justify,\n        passRef,\n        row,\n        style,\n        ...rest\n    } = props;\n\n    /**\n     * Calculate the class name for the root element.\n     */\n    const rootClassName = cn(\n        'div',\n        {\n            'row': row,\n            'col': !row,\n            'align-center': align && typeof align !== 'string',\n            [`align-${align}`]: align && typeof align === 'string',\n            'justify-center': justify && typeof justify !== 'string',\n            [`justify-${justify}`]: justify && typeof justify === 'string',\n            'align-self-center': alignSelf && typeof alignSelf !== 'string',\n            [`align-self-${alignSelf}`]: alignSelf && typeof alignSelf === 'string',\n            'fill-parent': fillParent\n        },\n        className\n    );\n\n    /**\n     * Calculate the inline style for the root element.\n     */\n    let rootStyle: any = ( style !== undefined ) ? style : {};\n    if ( flex )\n        rootStyle = {\n            ...rootStyle,\n            flex: typeof flex === 'number' ? flex : 1\n        };\n\n    if ( animate ) {\n        return (\n            <animated.div className={ rootClassName } style={ rootStyle } { ...rest }>\n                { children }\n            </animated.div>\n        );\n    }\n\n    return (\n        <div ref={ passRef } className={ rootClassName } style={ rootStyle } { ...rest }>\n            { children }\n        </div>\n    );\n};\n\nexport default memo( AnimatedDiv );","/**\n * Email address used for the email icon.\n */\nexport const EmailAddress: string = process.env[ 'REACT_APP_EMAIL' ] || '';\n\n/**\n * URL used for the Facebook profile icon.\n */\nexport const FacebookProfileUrl: string = process.env[ 'REACT_APP_FACEBOOK_URL' ] || '';\n\n/**\n * API key used to call read-only Github API endpoints.\n */\nexport const GithubApiKey: string = process.env[ 'REACT_APP_GITHUB_API_KEY' ] || '';\n\n/**\n * URL used for the Github profile icon.\n */\nexport const GithubProfileUrl: string = process.env[ 'REACT_APP_GITHUB_URL' ] || '';\n\n/**\n * Google Analytics tracking ID as found in the dotenv file.\n */\nexport const GoogleTrackingId: string = process.env[ 'GA_TRACKING_ID' ] || '';\n\n/**\n * Whether Google Analytics functionality is running in non-persistent debug mode.\n */\n export const IsGoogleTrackingDebug: boolean = ( process.env[ 'REACT_APP_GA_DEBUG' ] === 'true' );\n\n /**\n  * Whether redux debugging is enabled.\n  */\n export const IsReduxDebug: boolean = ( process.env[ 'REACT_APP_REDUX_DEBUG' ] === 'true' );","import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { IsReduxDebug } from '../utils/environment';\nimport { settingsReducer } from './settings';\nimport { IGlobalState } from './types';\nexport * from './settings';\nexport * from './types';\n\n/**\n * Initializes the global redux reducer, which is just a composite of all\n * store reducers within the site.\n */\nexport const globalReducer = combineReducers<IGlobalState>({\n    settings: settingsReducer\n});\n\n/**\n * Initializes the global store, and prepares it for use.\n */\nexport const store = configureStore({\n    reducer: globalReducer,\n    middleware: ( defaultMiddleware ) => defaultMiddleware({\n        serializableCheck: false,\n        immmutableCheck: false\n    }),\n    devTools: IsReduxDebug\n});\n\n/**\n * Exports the global store's dispatch type; useful for our custom useDispatch\n * hook.\n */\nexport type GlobalDispatch = typeof store.dispatch;","/**\n * Defines the recognized color themes of the site initialized as a\n * string array for easy validation in the utils.\n */\nexport const ThemeTypes = [\n    'light',\n    'dark'\n] as const;\n\n/**\n * Defines the recognized color themes of the site for type-checking.\n */\nexport type ThemeType = ( typeof ThemeTypes )[ number ];\n\n/**\n * Defines the properties required of the settings store within redux.\n */\nexport interface ISettingsState {\n    readonly theme: ThemeType;\n};\n\n/**\n * Defines the action keys for modifying the settings state.\n */\nexport enum SettingsAction {\n    SetTheme = '@@settings/SetTheme'\n};","import { ThemeType, ThemeTypes } from './types';\n\n/**\n * Default color theme.\n */\nconst DefaultTheme: ThemeType = 'dark';\n\n/**\n * Name of the cookie for storing the color theme.\n */\nconst ThemeKey = 'rh.theme';\n\n/**\n * Fetches the previously stored color theme from browser storage. If no previous\n * value is found, stores the default theme and returns it.\n * \n * @returns {ThemeType}\n */\nexport const getStoredTheme = (): ThemeType => {\n    let theme: string|null = window.localStorage.getItem( ThemeKey );\n    if ( theme === null ) {\n        theme = DefaultTheme;\n        setStoredTheme( theme as ThemeType );\n    }\n\n    return theme as ThemeType;\n};\n\n/**\n * Persists the provided color theme to browser storage.\n * \n * @param {ThemeType} theme \n */\nexport const setStoredTheme = ( theme: ThemeType ): void => {\n    if ( ThemeTypes.includes( theme ))\n        window.localStorage.setItem( ThemeKey, theme );\n};\n\n/**\n * Applies the theme by setting it as the value of the \"data-theme\" attribute\n * on the DOM.\n * \n * @param {ThemeType} theme \n */\nexport const applyTheme = ( theme: ThemeType ): void => {\n    document.documentElement.setAttribute( 'data-theme', theme.toLowerCase() );\n};","import { action } from 'typesafe-actions';\nimport { SettingsAction, ThemeType } from './types';\nimport { applyTheme, setStoredTheme } from './utils';\n\n/**\n * Persists the selected color theme to browser storage, applies the theme to\n * the DOM, and returns the dispatched action.\n * \n * @param {ThemeType} theme \n * @returns {action<SettingsAction,ThemeType>}\n */\nexport const setTheme = ( theme: ThemeType ) => {\n    setStoredTheme( theme );\n    applyTheme( theme );\n\n    return action( SettingsAction.SetTheme, theme );\n};","import { Reducer } from 'redux';\nimport { ISettingsState, SettingsAction } from './types';\nimport { getStoredTheme } from './utils';\n\n/**\n * Defines the initial state of the settings store.\n */\nconst initialState: ISettingsState = {\n    theme: getStoredTheme()\n};\n\n/**\n * Redux reducer responsible for applying dispatched actions against the state\n * of the settings store.\n * \n * @param {ISettingsState} state \n * @param {action<SettingsAction,ThemeType>} action \n */\nexport const settingsReducer: Reducer<ISettingsState> = ( state = initialState, action ) => {\n    switch ( action.type ) {\n\n        /**\n         * Handles a dispatch in which the color theme has been modified.\n         */\n        case SettingsAction.SetTheme: {\n            return {\n                ...state,\n                theme: action.payload\n            };\n        }\n\n        default:\n            return state;\n    }\n};","import { FC, Fragment, memo } from 'react';\nimport { animated, useSpring } from 'react-spring';\nimport useSelector from '../../../hooks/useSelector';\nimport './index.scss';\n\nconst calc = ( x: number, y: number ): number[] =>\n    [ x - window.innerWidth / 2, y - window.innerHeight / 2 ];\n\nconst translate20 = ( x: number, y: number ): string =>\n    `translate(${x / 20}px, ${y / 20}px)`;\nconst translate15 = ( x: number, y: number ): string =>\n    `translate(${x / 15}px, ${y / 15}px)`;\nconst translate10 = ( x: number, y: number ): string =>\n    `translate(${x / 10}px, ${y / 10}px)`;\n\ninterface IProps {\n    clientX: number;\n    clientY: number;\n}\n\nconst BackgroundAnimator: FC<IProps> = ({ clientX, clientY }) => {\n    const { theme } = useSelector( s => s.settings );\n\n    const animationProps = useSpring({\n        xy: calc( clientX, clientY ),\n        config: {\n            mass: 10,\n            tension: 550,\n            friction: 240\n        }\n    });\n\n    return (\n        <Fragment>\n            <animated.div\n                className=\"bg-img-layer\"\n                style={{\n                    //opacity: 0.1,\n                    transform: animationProps.xy.to( translate20 ),\n                    backgroundImage: `url(/img/bg/bg_${theme.toLowerCase()}-doodle-fixed.png)`\n                }}\n            />\n            <animated.div\n                className=\"bg-img-layer\"\n                style={{\n                    //opacity: 0.15,\n                    transform: animationProps.xy.to( translate15 ),\n                    backgroundImage: `url(/img/bg/bg_${theme.toLowerCase()}-doodle-second.png)`\n                }}\n            />\n            <animated.div\n                className=\"bg-img-layer\"\n                style={{\n                    //opacity: 0.25,\n                    transform: animationProps.xy.to( translate10 ),\n                    backgroundImage: `url(/img/bg/bg_${theme.toLowerCase()}-doodle-first.png)`\n                }}\n            />\n        </Fragment>\n    );\n};\n\nexport default memo( BackgroundAnimator );","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { IGlobalState } from '../store';\n\n/**\n * Utility hook that applies the global store's context against redux's\n * useSelector hook.\n * \n * @returns {TypedUseSelectorHook<IGlobalState>}\n */\nconst useGlobalSelector: TypedUseSelectorHook<IGlobalState> = useSelector;\nexport default useGlobalSelector;","var map = {\n\t\"./img_profile@1x.png\": 79,\n\t\"./img_profile@2x.png\": 80\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 78;","export default __webpack_public_path__ + \"static/media/img_profile@1x.b23cda19.png\";","export default __webpack_public_path__ + \"static/media/img_profile@2x.b1f56b3e.png\";","var map = {\n\t\"./bg_dark-doodle-first.png\": 82,\n\t\"./bg_dark-doodle-fixed.png\": 83,\n\t\"./bg_dark-doodle-second.png\": 84,\n\t\"./bg_light-doodle-first.png\": 85,\n\t\"./bg_light-doodle-fixed.png\": 86,\n\t\"./bg_light-doodle-second.png\": 87\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 81;","export default __webpack_public_path__ + \"static/media/bg_dark-doodle-first.85779d20.png\";","export default __webpack_public_path__ + \"static/media/bg_dark-doodle-fixed.d3234037.png\";","export default __webpack_public_path__ + \"static/media/bg_dark-doodle-second.303dcceb.png\";","export default __webpack_public_path__ + \"static/media/bg_light-doodle-first.2692bd96.png\";","export default __webpack_public_path__ + \"static/media/bg_light-doodle-fixed.03576efd.png\";","export default __webpack_public_path__ + \"static/media/bg_light-doodle-second.b734319b.png\";","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { faFacebook, faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { faEnvelope, faToggleOff, faToggleOn } from '@fortawesome/pro-regular-svg-icons';\n\nlibrary.add(\n    faEnvelope,\n    faFacebook,\n    faGithub,\n    faToggleOff,\n    faToggleOn\n);\n\nexport default library;","import { FC, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport ReactGA, { FieldsObject, InitializeOptions } from 'react-ga';\nimport { GoogleTrackingId, IsGoogleTrackingDebug } from '../utils/environment';\nimport packageJson from '../../package.json';\n\n/**\n * Defines properties allowed on this component.\n */\ninterface IProps {\n    overrides?: FieldsObject;\n}\n\n/**\n * Functional component providing page analytics.\n * \n * @param {IProps}\n */\nconst Analytics: FC<IProps> = ({ overrides }) => {\n    const { pathname, search } = useLocation();\n\n    /**\n     * Sends information about the current page view to Google Analytics.\n     * \n     * @param {string} pathname \n     * @param {string|undefined} search \n     */\n    const send = ( pathname: string, search: string = '' ) => {\n        const { location } = window;\n        const page = `${pathname}${search}`;\n        const url = `${location.origin}${page}`;\n\n        ReactGA.set({\n            page,\n            location: url,\n            appName: packageJson.name,\n            appVersion: packageJson.version,\n            ...overrides\n        });\n    };\n\n    /**\n     * On component mount, send the initial page view.\n     */\n    useEffect(() => {\n        send( pathname, search );\n    }, [] );\n\n    /**\n     * On component update of the pathname or search,\n     * send the new page view.\n     */\n    useEffect(() => {\n        send( pathname, search );\n    }, [ pathname, search ]);\n\n    return null;\n};\n\n/**\n * Initializes Google Analytics for traffic analysis.\n * \n * @param {InitializeOptions} options \n */\nexport const initializeAnalytics = ( options?: InitializeOptions ): void => {\n    ReactGA.initialize( GoogleTrackingId, {\n        debug: IsGoogleTrackingDebug,\n        ...options\n    });\n};\n\nexport default Analytics;","import { FC, Fragment, ComponentPropsWithoutRef, useEffect, useRef, useState } from 'react';\nimport { withRouter } from 'react-router';\nimport { useLocation } from 'react-router-dom';\nimport { Spring, Transition } from 'react-spring';\nimport { animationFrameTimeout, getContextPaths, preloadImage } from '../../utils/helpers';\nimport AnimatedDiv from '../AnimatedDiv';\nimport BackgroundAnimator from '../Background/BackgroundAnimator';\nimport './index.scss';\n\n/**\n * Defines load states used by the splash loader to determine the current\n * state of dynamic asset loading.\n */\ntype LoadState = 'loading'|'loaded'|'ok';\n\n/**\n * Base site images.\n */\nconst SiteImages = require.context( '../../../public/img', false, /.*\\.png$|jpg$|jpeg$/ );\n\n/**\n * Site background images.\n */\nconst SiteBackgroundImages = require.context( '../../../public/img/bg', false, /.*\\.png$|jpg$|jpeg$/ );\n\n/**\n * Functional component providing a splash page that overlays the rest of the\n * window until all assets/views are fully loaded.\n * \n * @param {ComponentPropsWithoutRef<any>} props \n */\nconst SplashLoader: FC<ComponentPropsWithoutRef<any>> = ({ children }) => {\n    const { pathname } = useLocation();\n    const totalItems = useRef<number>( 0 );\n    const loadedItems = useRef<number>( 0 );\n    \n    const [ showBackground, setShowBackground ] = useState<boolean>( true );\n    const [ loadPercent, setLoadPercent ] = useState<number>( 0 );\n    const [ loadState, setLoadState ] = useState<LoadState>( 'loading' );\n\n    /**\n     * Increments the non-stateful number of items that have fully loaded.\n     */\n    const incrementLoaded = () => {\n        loadedItems.current = loadedItems.current + 1;\n    };\n\n    /**\n     * Handles completion of dynamic item loading, optionally accepting a\n     * flag for immediately doing so.\n     * \n     * @param {boolean} showImmediate \n     */\n    const complete = ( showImmediate?: boolean ) => {        \n        // Background images should be loaded without impacting the splash loader\n        // progress.\n        const images: HTMLImageElement[] = [];\n        const contextImages = getContextPaths( SiteBackgroundImages );\n        contextImages.map( src => (\n            images.push( preloadImage( src ))\n        ));\n\n        if ( showImmediate ) {\n            setLoadState( 'ok' );\n            setShowBackground( false );\n            return;\n        }\n\n        if ( loadPercent !== 100 )\n            setLoadPercent( 100 );\n\n        setLoadState( 'loaded' );\n\n        // We briefly delay in order to prevent immediate display of content.\n        animationFrameTimeout(() => {\n            setLoadState( 'ok' );\n\n            animationFrameTimeout(() => {\n                setShowBackground( false );\n            }, 400 );\n        }, 500 );\n    };\n\n    /**\n     * Evaluates the current load progress every 400-600 milliseconds, and updates\n     * load percentage until complete.\n     */\n    const evaluateProgress = () => {\n        const isLast = ( totalItems.current - loadedItems.current <= 1 );\n        const updateDelayMs = ( isLast ) ? 600 : 400;\n\n        animationFrameTimeout(() => {\n\n            // For the last 2%, we manually increment the loaded item count to\n            // ensure a smooth and seamless animation.\n            if ( isLast )\n                incrementLoaded();\n\n            setLoadPercent( Math.trunc(( loadedItems.current / totalItems.current ) * 100 ));\n\n            // If we're done, halt and complete the splash loader.\n            if ( loadedItems.current >= totalItems.current )\n                complete();\n\n            // Otherwise, re-evaluate progress.\n            else\n                evaluateProgress();\n        }, updateDelayMs );\n    };\n\n    /**\n     * Begins dynamically loading assets required by the site. Note that this\n     * does not replace our lazy-load directives in App.tsx.\n     */\n    const load = () => {\n\n        // Dynamic image loading.\n        const images = Array.from( document.images );\n        const contextImages = getContextPaths( SiteImages );\n        contextImages.map( src => (\n            images.push( preloadImage( src, () => incrementLoaded()))\n        ));\n\n        // Dynamic page loading.\n        import( '../../views/Landing' ).then( _ => incrementLoaded());\n\n        // Track item count, which is a count of the images we need to load plus\n        // the number of views we need to load.\n        totalItems.current = images.length + 1;\n\n        // If all images are loaded, immediately halt and complete the splash\n        // loader.\n        let imagesLoaded = images.every( image => image.complete );\n        if ( imagesLoaded ) {\n            complete( true );\n        }\n\n        // Otherwise, start checking progress.\n        else {\n            evaluateProgress();\n        }\n    };\n\n    /**\n     * On component mount, begin dynamically loading site dependencies and\n     * tracking progress.\n     */\n    useEffect(() => {\n        load();\n    }, [] );\n\n    return (\n        <AnimatedDiv className=\"splash-loader\">\n            { loadState === 'ok' && children }\n\n            { showBackground && (\n                <AnimatedDiv align row className=\"splash-loader-container\">\n                    <div className=\"background-container\">\n                        <div className=\"background\">\n                            <BackgroundAnimator clientX={ 0 } clientY={ 0 } />\n                        </div>\n                    </div>\n\n                    <Transition\n                        items={ loadState }\n                        from={{ opacity: 1 }}\n                        enter={{ opacity: 1 }}\n                        leave={{ opacity: 0 }}\n                    >\n                        {( styles, item ) => (\n                            item === 'loading'\n                                ? (\n                                    <Fragment>\n                                        <Spring to={{ width: `calc( 100vw - ${loadPercent}vw )`, x: loadPercent }}>\n                                            {\n                                                springProps => (\n                                                    <Fragment>\n                                                        <div style={ styles } className=\"percentage-text\">{ Math.floor( springProps.x.get() )}</div>\n                                                        <div className=\"loading-text-container\" style={{ opacity: styles.opacity, width: springProps.width.get() }}>\n                                                            <div className=\"loading-text\">\n                                                                Loading...\n                                                            </div>\n                                                        </div>\n                                                    </Fragment>\n                                                )\n                                            }\n                                        </Spring>\n                                    </Fragment>\n                                )\n                                : null\n                        )}\n                    </Transition>\n                </AnimatedDiv>\n            )}\n        </AnimatedDiv>\n    );\n};\n\nexport default withRouter( SplashLoader );","import { FC, lazy, Suspense, useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Analytics, { initializeAnalytics } from './components/Analytics';\nimport AnimatedDiv from './components/AnimatedDiv';\nimport SplashLoader from './components/SplashLoader';\nimport { applyTheme, IGlobalState } from './store';\n\n// Lazy-load the landing page.\nconst Landing = lazy(() => import( './views/Landing' ));\n\n/**\n * Returns a composite mapping of global app state properties provided by redux.\n * \n * @param {IGlobalState} state \n * @returns \n */\nconst mapState = ( state: IGlobalState ) => ({\n    settings: state.settings\n});\n\n/**\n * Initializes a wrapper applied to the App component to place it within the\n * scope of redux, and uses the result to prepare a typing of properties for\n * the component.\n */\nconst connector = connect( mapState );\ntype IProps = ConnectedProps<typeof connector>;\n\n/**\n * Functional component providing the base functionality of the site.\n */\nconst App: FC<IProps> = ( props ) => {\n    const { theme } = props.settings;\n\n    /**\n     * On component mount, initialize Google Analytics and apply the stored\n     * color theme.\n     */\n    useEffect(() => {\n        if ( !( window as any ).ga )\n            initializeAnalytics();\n\n        applyTheme( theme );\n    }, [] );\n\n    return (\n        <AnimatedDiv className=\"rh-main\">\n            <Router>\n                <Route component={ Analytics } />\n\n                <Suspense fallback={ null }>\n                    <Switch>\n                        <Route path=\"/\">\n                            <SplashLoader>\n                                <Landing />\n                            </SplashLoader>\n                        </Route>        \n                    </Switch>\n                </Suspense>\n            </Router>\n        </AnimatedDiv>\n    );\n};\n\nexport default connector( App );\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './styles/app.scss';\nimport './utils/icons';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={ store }>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById( 'root' )\n);\n"],"sourceRoot":""}